#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const prettier = require('prettier');
const pascalCase = require('pascal-case');
const kebabCase = require('kebab-case');

const outputDir = path.resolve(__dirname, '../src/components');
const componentName = process.argv[2];
const withStyle = process.argv[3] === '--style';

const compVarName = pascalCase(componentName);
const compFileName = kebabCase(componentName);
const format = src => prettier.format(src.join('\n'), { parser: 'typescript' });
const compOutDir = `${outputDir}/${compFileName}`;

if(!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
}

if(fs.existsSync(compOutDir)) {
    console.log(chalk.red(`${componentName} already exists`));
    process.exit(1);
}

fs.mkdirSync(compOutDir);

if(withStyle) {
    fs.writeFileSync(`${compOutDir}/${compFileName}.css`, `.root {}`);
    fs.writeFileSync(`${compOutDir}/${compFileName}.css.d.ts`, format([
        `declare const styles: {`,
        `    readonly "root": string;`,
        `};`,
        `export = styles;`,
    ]));
}

fs.writeFileSync(`${compOutDir}/${compFileName}.tsx`, format([
    `import React from "react";`,
    `${ withStyle ? `import styles from "./${compFileName}.css";` : '' }`,
    ``,
    `type Props = {};`,
    ``,
    `const ${compVarName} = (props: Props) => (`,
    `    <div${ withStyle ? ' className={styles.root}' : '' } />`,
    `);`,
    ``,
    `export default ${compVarName};`,
]));

fs.writeFileSync(`${outputDir}/${compFileName}/index.ts`, format([
    `export { default } from "./${compFileName}";`,
    '',
]));

console.log(chalk.green(`ðŸŽ‰  ${compFileName} created`));
